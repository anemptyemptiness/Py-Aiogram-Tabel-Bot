import logging

from aiogram.types import Message
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

import db
from fsm.fsm import FSMAdmin
from filters.is_admin import isAdminFilter
from config.config import config

router_adm = Router()


@router_adm.message(Command(commands="stats"), isAdminFilter(config.admins))
async def process_get_stats_command(message: Message, state: FSMContext):
    await state.set_state(FSMAdmin.stats)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç <b>–ß–ï–†–ï–ó –ü–†–û–ë–ï–õ</b>"
                              " –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ì–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å –ì–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å</em>\n\n"
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: 2023-12-20 2023-12-21, '
                              '—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç 20 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞ –¥–æ 21 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞\n\n'
                              "–ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ –¥–Ω—è –º–µ–Ω—å—à–µ 10, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å –≤–æ—Ç —Ç–∞–∫: <em>01-09</em>\n\n"
                              '–ù–∞–ø—Ä–∏–º–µ—Ä, 2023-12-<b>01</b> 2023-12-<b>02</b>, '
                              '—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç 1 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞ –¥–æ 2 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞',
                         parse_mode="html")


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.stats), F.text)
async def get_stats(message: Message, state: FSMContext):
    await state.update_data(date=message.text)

    date_from, date_to = (await state.get_data())['date'].split()

    try:
        rows = db.DB.get_statistics(date_from=date_from, date_to=date_to)

        places = {
            "–ë–µ–ª–∞—è –î–∞—á–∞": sum([row[0].count("–ë–µ–ª–∞—è –î–∞—á–∞") for row in rows]),
            "–†–∏–≤—å–µ—Ä–∞": sum([row[0].count("–†–∏–≤—å–µ—Ä–∞") for row in rows]),
            "–†–∏–≥–∞ –ú–æ–ª–ª": sum([row[0].count("–†–∏–≥–∞ –ú–æ–ª–ª") for row in rows]),
            "–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ": sum([row[0].count("–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ") for row in rows]),
            "–©–µ–ª–∫–æ–≤—Å–∫–∏–π": sum([row[0].count("–©–µ–ª–∫–æ–≤—Å–∫–∏–π") for row in rows]),
        }

        report = f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º —Ç–æ—á–µ–∫\n<b>–æ—Ç</b> {date_from} <b>–¥–æ</b> {date_to}\n\n"
        index_place = 0
        index_rows = 0

        for count in places.values():
            if count:
                report += f"–†–∞–±–æ—á–∞—è —Ç–æ—á–∫–∞: <b>{rows[index_place][0]}</b>\n"

                for i in range(count):
                    report += f"üìù–†–∞–±–æ—Ç–Ω–∏–∫: <em>{rows[index_rows][1]}</em>\n‚îî"
                    report += f"–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{rows[index_rows][2]}</em>\n\n"

                    index_rows += 1

                report += "\n"
                index_place += count

        await message.answer(text=report,
                             parse_mode="html")

    except Exception as e:
        await message.bot.send_message(text=f"Get stats error: {e}\n"
                                            f"User_id: {message.from_user.id}",
                                       chat_id=config.admins[0])
        await message.answer(text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n\n"
                                  "–í–æ–∑–Ω–∏–∫–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, "
                                  "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                             parse_mode="html")
    finally:
        await state.clear()


@router_adm.message(isAdminFilter(config.admins), StateFilter(FSMAdmin.stats))
async def warning_get_stats(message: Message):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <em>–ì–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å</em> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n"
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: 2023-12-20 2023-12-21\n\n'
                              "–ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ –¥–Ω—è –º–µ–Ω—å—à–µ 10, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å –≤–æ—Ç —Ç–∞–∫: <em>01-09</em>\n"
                              '–ù–∞–ø—Ä–∏–º–µ—Ä, 2023-12-<b>01</b> 2023-12-<b>02</b>',
                         parse_mode="html")
